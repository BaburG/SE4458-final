version: "3.8"

services:
  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ message broker port
      - "15672:15672"  # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network
  # --------------------
  # 1) Medicine Service
  # --------------------
  medicine_service:
    build: ./medicine_service
    container_name: medicine_service
    # We expose port 8000 inside the container. You can map it to local host if desired.
    ports:
      - "8000:8000"
    environment:
      # Environment variables for Cosmos DB
      COSMOS_HOST: "${COSMOS_HOST}"
      COSMOS_KEY: "${COSMOS_KEY}"
      COSMOS_DATABASE: "${COSMOS_DATABASE}"
      COSMOS_CONTAINER: "${COSMOS_CONTAINER}"

      # Environment variables for Redis
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_USERNAME: "${REDIS_USERNAME}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    networks:
      - app_network

    # If you need, add volumes or restart policies:
    # volumes:
    #  - ./medicine_service/downloads:/app/downloads
    # restart: always

  # ------------------------
  # 2) Prescription Service
  # ------------------------
  prescription_service:
    build: ./prescription_service
    container_name: prescription_service
    ports:
      - "8001:8000"
    environment:
      # Environment variables for DB
      DB_SERVER: "${DB_SERVER}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"

      # RabbitMQ for event publishing
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASS: "${RABBITMQ_PASS}"
      MEDS_SVC_HOST: "http://medicine_service:8000"
    networks:
      - app_network

  # -----------------------
  # 3) Notification Service
  # -----------------------
  notification_service:
    build: ./notification_service
    container_name: notification_service
    # We typically run it in background without exposing a port,
    # unless you want to expose metrics or an API:
    # ports:
    #  - "8002:8000"
    environment:
      # DB connection if we need to query prescription DB
      DB_SERVER: "${DB_SERVER}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"

      # RabbitMQ for consuming events
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASS: "${RABBITMQ_PASS}"

    # The notification_service has an internal scheduler that runs daily.
    # So no external request is needed for it.
    networks:
      - app_network

  # -------------------
  # 4) Doctor Frontend
  # -------------------
  doctor_frontend:
    build: ./doctor_frontend
    container_name: doctor_frontend
    ports:
      - "5173:5173"  # or whatever Vite dev/production port you want
    environment:
      VITE_MOCK_API_URL: "${VITE_MOCK_API_URL}"
      VITE_BACKEND_URL: "http://prescription_service:8000" 
      VITE_PRESCRIPTION_URL: "http://prescription_service:8000"
    networks:
      - app_network
    depends_on:
      - prescription_service

  # ---------------------
  # 5) Pharmacy Frontend
  # ---------------------
  pharmacy_frontend:
    build: ./pharmacy_frontend
    container_name: pharmacy_frontend
    ports:
      - "5174:5173"
    environment:
      VITE_MOCK_API_URL: "${VITE_MOCK_API_URL}"
    networks:
      - app_network
    depends_on:
      - prescription_service
      - rabbitmq

  # ---------------------
  # 6) Gateway (Nginx)
  # ---------------------
  gateway:
    image: nginx:latest
    container_name: gateway
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx.conf.d:/etc/nginx/conf.d
    networks:
      - app_network
    depends_on:
      - doctor_frontend
      - pharmacy_frontend
      - notification_service

networks:
  app_network:
    driver: bridge